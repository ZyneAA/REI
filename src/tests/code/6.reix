use std/clone as Clone;
use std/collection/vec as Vec;
use std/cmp/std_compare as StdCompare;
use std/cmp/comparable as Comparable;
use std/instance/instance as Instance;
use std/instance/drop as Drop;
use std/math as Math;

class Person < Clone {

    init(name, age, weight, height) {
        this.name = name;
        this.age = age;
        this.weight = weight;
        this.height = height;
    }

    calculate_bmi() {
        let val = this.weight / Math.pow(this.height, 2);
        return val;
    }

}

class Info {

    static show_person_info(persons) {

        if (@typeof(persons, "Vec")) {
            loop (let i = 0..persons.len(); 1) {
                let person = persons.get(i);

                println "Name: " + person.name;
                println "Age: " + person.age;
                println "The BMI: " + person.calculate_bmi() + "\n";
            }
        } else {
            fatal "persons must be a Vec!";
        }

    }

}

let person0 = Person("Jill", 22, 110, 66);
let person1 = Person("Leon", 30, 160, 72);

let person2 = person0;
person2.name = "Lana";
let person3 = person2;

let person4 = person3.clone();
person4.name = "Ada";

let persons = Vec();
persons.push(person0);
persons.push(person1);
persons.push(person2);
persons.push(person3);
persons.push(person4);

Info.show_person_info(persons);

let salary = Vec();
salary.push(9000);
salary.push(10000);
salary.push(3000);

persons.append(salary);

println "the 'name' vec: " + persons.vec;
println "the len() is: " + persons.len();
println "is empty: " + persons.is_empty();
println "the 'salary' vec: " + salary.vec + "\n";

